#!/bin/bash

# Configuration file lives next to this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/fms-tools.conf"

# Portable in-place sed helper for GNU and BSD sed
sed_inplace() {
    if sed --version >/dev/null 2>&1; then
        sed -i "$1" "$2"
    else
        sed -i '' "$1" "$2"
    fi
}

update_self_path() {
    local var_name path
    var_name=$(basename "${BASH_SOURCE[0]}")
    # Use "tr" to uppercase the script name for compatibility with
    # systems running bash versions without the "^^" expansion.
    var_name=$(printf '%s' "$var_name" | tr '[:lower:]' '[:upper:]')
    var_name=${var_name//-/_}
    if [[ "$var_name" == "FMS_ADMIN" ]]; then
        var_name="FMS_ADMIN_WRAPPER"
    fi
    path="${SCRIPT_DIR}/$(basename "${BASH_SOURCE[0]}")"
    mkdir -p "$(dirname "$CONFIG_FILE")"
    touch "$CONFIG_FILE"
    if grep -q "^${var_name}=" "$CONFIG_FILE" 2>/dev/null; then
        sed_inplace "s|^${var_name}=.*|${var_name}=\\\"${path}\\\"|" "$CONFIG_FILE"
    else
        echo "${var_name}=\"${path}\"" >> "$CONFIG_FILE"
    fi
}
update_self_path

# Update or insert a configuration variable into $CONFIG_FILE
set_config_var() {
    local key="$1" value="$2"
    mkdir -p "$(dirname "$CONFIG_FILE")"
    touch "$CONFIG_FILE"
    if grep -q "^${key}=" "$CONFIG_FILE" 2>/dev/null; then
        sed_inplace "s|^${key}=.*|${key}=\\\"${value}\\\"|" "$CONFIG_FILE"
    else
        echo "${key}=\"${value}\"" >> "$CONFIG_FILE"
    fi
}

# Generate a random key for encrypting passwords when none exists
random_key() {
    openssl rand -hex 16
}

# Password encryption key stored in the configuration file
ENCRYPT_KEY=""

# Helper functions for encrypting and decrypting passwords
encrypt_password() {
    local plaintext="$1"
    printf '%s' "$plaintext" | openssl enc -aes-256-cbc -a -salt -pbkdf2 \
        -pass pass:"$ENCRYPT_KEY" 2>/dev/null
}

decrypt_password() {
    local ciphertext="$1"
    printf '%s\n' "$ciphertext" | openssl enc -aes-256-cbc -a -d -salt -pbkdf2 \
        -pass pass:"$ENCRYPT_KEY" 2>/dev/null
}

# Track whether extra command output should be displayed
VERBOSE=0

show_help() {
    echo
    cat <<EOF
  fms-admin - wrapper around fmsadmin using credentials from fms-tools.conf.

  Usage: $0 [--configure|--show-config|--help|--verbose] [fmsadmin options...]

  --configure   Launch an interactive wizard to set up the configuration.
  --show-config Display the current configuration values.
  --verbose     Display output from fmsadmin even when successful.
  --help        Display this help message and exit.

  All other options are passed through to the real fmsadmin.
EOF
    echo
}

show_missing_config() {
    cat >&2 <<EOF

  It looks like this is your first time running fms-admin.
  The file 'fms-tools.conf' was not found.

  Run "$0 --configure" to create the configuration.
  Example:
    $0 --configure
EOF
}

load_config() {
    # shellcheck source=/dev/null
    source "$CONFIG_FILE"
    ENCRYPT_KEY="${ENCRYPT_KEY:-$(random_key)}"
    if [[ -n "$FMS_PASSWORD_ENC" && -z "$FMS_PASSWORD" ]]; then
        FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
    fi
}

show_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        show_missing_config
        return 1
    fi
    load_config

    # Remove any carriage returns that might be present
    FMS_ADMIN=${FMS_ADMIN//$'\r'/}
    FMS_USERNAME=${FMS_USERNAME//$'\r'/}
    FMS_PASSWORD=${FMS_PASSWORD//$'\r'/}

    echo
    echo "     FMS_ADMIN: $FMS_ADMIN"
    echo "  FMS_USERNAME: $FMS_USERNAME"
    echo "  FMS_PASSWORD: $FMS_PASSWORD"
    echo "   ENCRYPT_KEY: [hidden]"
    echo
}

run_fmsadmin() {
    if [[ $VERBOSE -eq 1 ]]; then
        "$@"
        return $?
    else
        local output
        output=$("$@" 2>&1 >/dev/null)
        local status=$?
        if [[ $status -ne 0 ]]; then
            echo "$output"
        fi
        return "$status"
    fi
}

run_default() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        show_missing_config
        return 1
    fi
    load_config
    if [[ -z "$FMS_ADMIN" || -z "$FMS_USERNAME" || -z "$FMS_PASSWORD" ]]; then
        show_missing_config
        return 1
    fi

    # Remove any carriage returns from config values
    FMS_ADMIN=${FMS_ADMIN//$'\r'/}
    FMS_USERNAME=${FMS_USERNAME//$'\r'/}
    FMS_PASSWORD=${FMS_PASSWORD//$'\r'/}

    run_fmsadmin "$FMS_ADMIN" --username "$FMS_USERNAME" --password "$FMS_PASSWORD" "${FMS_ARGS[@]}"
}

ACTION=""
FMS_ARGS=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --configure|--show-config|--help)
            ACTION="$1"
            shift
            break
            ;;
        --verbose)
            VERBOSE=1
            shift
            ;;
        --)
            shift
            FMS_ARGS+=("$@")
            break
            ;;
        *)
            FMS_ARGS+=("$1")
            shift
            ;;
    esac
done

case "$ACTION" in
    --configure)
        configure() {
            echo
            echo "  This wizard will create or update the fms-admin configuration."
            echo "  Settings will be saved to $CONFIG_FILE"
            echo

            if [ -f "$CONFIG_FILE" ]; then
                # shellcheck source=/dev/null
                source "$CONFIG_FILE"
                if [[ -n "$FMS_PASSWORD_ENC" && -n "$ENCRYPT_KEY" ]]; then
                    FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
                fi
            fi

            read -rp "  Path to fmsadmin [$FMS_ADMIN]: " tmp
            FMS_ADMIN=${tmp:-$FMS_ADMIN}
            read -rp "  Username [$FMS_USERNAME]: " tmp
            FMS_USERNAME=${tmp:-$FMS_USERNAME}
            read -rsp "  Password: " tmp; echo
            if [[ -n "$tmp" ]]; then
                ENCRYPT_KEY="${ENCRYPT_KEY:-$(random_key)}"
                set_config_var "ENCRYPT_KEY" "$ENCRYPT_KEY"
                FMS_PASSWORD_ENC=$(encrypt_password "$tmp")
                set_config_var "FMS_PASSWORD_ENC" "$FMS_PASSWORD_ENC"
                sed_inplace "/^FMS_PASSWORD=/d" "$CONFIG_FILE"
            fi
            set_config_var "FMS_ADMIN" "$FMS_ADMIN"
            set_config_var "FMS_USERNAME" "$FMS_USERNAME"

            echo
            echo "  Configuration saved to $CONFIG_FILE"
            echo
        }
        configure
        exit $?
        ;;
    --show-config)
        show_config
        exit $?
        ;;
    --help)
        show_help
        exit 0
        ;;
    "")
        run_default
        exit $?
        ;;
    *)
        show_help
        exit 1
        ;;
esac
