#!/bin/bash

# Configuration directory and files
# Configuration file lives next to this script for compatibility with other tools
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/server.conf"

# Portable in-place sed helper for GNU and BSD sed
sed_inplace() {
    if sed --version >/dev/null 2>&1; then
        sed -i "$1" "$2"
    else
        sed -i '' "$1" "$2"
    fi
}
update_self_path() {
    local var_name path
    var_name=$(basename "${BASH_SOURCE[0]}")
    # Use "tr" to uppercase the script name for compatibility with
    # systems running bash versions without the "^^" expansion.
    var_name=$(printf '%s' "$var_name" | tr '[:lower:]' '[:upper:]')
    var_name=${var_name//-/_}
    path="${SCRIPT_DIR}/$(basename "${BASH_SOURCE[0]}")"
    mkdir -p "$(dirname "$CONFIG_FILE")"
    touch "$CONFIG_FILE"
    if grep -q "^${var_name}=" "$CONFIG_FILE" 2>/dev/null; then
        sed_inplace "s|^${var_name}=.*|${var_name}=\\\"${path}\\\"|" "$CONFIG_FILE"
    else
        echo "${var_name}=\"${path}\"" >> "$CONFIG_FILE"
    fi
}
update_self_path

# Update or insert a configuration variable into $CONFIG_FILE
set_config_var() {
    local key="$1" value="$2"
    mkdir -p "$(dirname "$CONFIG_FILE")"
    touch "$CONFIG_FILE"
    if grep -q "^${key}=" "$CONFIG_FILE" 2>/dev/null; then
        sed_inplace "s|^${key}=.*|${key}=\\\"${value}\\\"|" "$CONFIG_FILE"
    else
        echo "${key}=\"${value}\"" >> "$CONFIG_FILE"
    fi
}
# Track counts of files closed and currently open
FILES_CLOSED_COUNT=0

# Output captured from fmsadmin commands
CLIENTS_LIST_OUTPUT=""
CLOSE_LOG_OUTPUT=""

# Generate a random key for encrypting passwords when none exists
random_key() {
    openssl rand -hex 16
}

# Password encryption key stored in the configuration file
ENCRYPT_KEY=""

# Track whether extra command output should be displayed
VERBOSE=0

# Helper functions for encrypting and decrypting passwords
encrypt_password() {
    local plaintext="$1"
    printf '%s' "$plaintext" | openssl enc -aes-256-cbc -a -salt -pbkdf2 \
        -pass pass:"$ENCRYPT_KEY" 2>/dev/null
}

decrypt_password() {
    local ciphertext="$1"
    printf '%s\n' "$ciphertext" | openssl enc -aes-256-cbc -a -d -salt -pbkdf2 \
        -pass pass:"$ENCRYPT_KEY" 2>/dev/null
}

# Indent all output lines by two spaces
indent_output() { sed 's/^/  /'; }
show_help() {
    echo
    cat <<EOF
  fms-restarter - gracefully restart FileMaker Server when it is safe to do so.

  Usage: $0 [--configure|--help|--restart-soon|--show-config|--verbose]

  --configure     Launch an interactive wizard to set up the fms-restarter configuration.
  --help          Display this help message and exit.
  --restart-soon  Create a flag that triggers a restart on the next run.
  --show-config   Display the current configuration values.
  --verbose       Display raw output from fmsadmin commands.

  Running without options checks whether the restart flag is present and
  restarts FileMaker Server if no clients are connected and no files are open.
EOF
    echo
}

show_missing_config() {
    cat >&2 <<EOF

  It looks like this is your first time running fms-restarter.
  The file 'server.conf' was not found.

  Run "$0 --configure" to create the configuration.
  Example:
    $0 --configure
EOF
}



configure() {
    echo
    echo "  This wizard will create or update the fms-restarter configuration."
    echo
    echo "  Settings will be saved to $CONFIG_FILE"
    echo

    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        if [[ -n "$FMS_PASSWORD_ENC" ]]; then
            FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
        fi
        if grep -q '^RESTART_REQUESTED_AT=' "$CONFIG_FILE"; then
            RESTART_REQUESTED_AT=$(grep '^RESTART_REQUESTED_AT=' "$CONFIG_FILE" | sed 's/^RESTART_REQUESTED_AT=//; s/^\"//; s/\"$//')
        fi
        ENCRYPT_KEY="${ENCRYPT_KEY:-$(random_key)}"
        echo "  Existing configuration detected; current values are shown in brackets."
        echo
    else
        ENCRYPT_KEY="$(random_key)"
    fi

    if [[ -z "$FMS_ADMIN" ]]; then
        candidate=$(command -v fmsadmin 2>/dev/null)
        if [[ -n "$candidate" && -x "$candidate" ]]; then
            FMS_ADMIN="$candidate"
        else
            candidate=$(command -v fmsadmin.exe 2>/dev/null)
            if [[ -n "$candidate" && -x "$candidate" ]]; then
                FMS_ADMIN="$candidate"
            fi
        fi
    fi

    echo "  Specify the full path to the 'fmsadmin' command."
    read -rp "  Path to fmsadmin [${FMS_ADMIN:-}] : " input
    FMS_ADMIN=${input:-$FMS_ADMIN}
    echo

    echo "  Enter the username used for fmsadmin / FileMaker Server Admin Console."
    read -rp "  Username [${FMS_USERNAME:-}] : " input
    FMS_USERNAME=${input:-$FMS_USERNAME}
    echo

    echo "  Enter the password for the username above."
    echo "  The password will be stored encrypted in $CONFIG_FILE."
    if [[ -n "$FMS_PASSWORD" ]]; then
        read -srp "  Password [********] : " input
        echo
        FMS_PASSWORD=${input:-$FMS_PASSWORD}
    else
        read -srp "  Password : " FMS_PASSWORD
        echo
    fi

    FMS_PASSWORD_ENC=$(encrypt_password "$FMS_PASSWORD")

    # Preserve any existing configuration options that are not managed by
    # fms-restarter. This avoids wiping settings used by other tools that
    # share the same configuration file (e.g. fms-certbot-deployer).
    OTHER_CONFIG=""
    if [[ -f "$CONFIG_FILE" ]]; then
        OTHER_CONFIG=$(grep -vE '^(ENCRYPT_KEY|FMS_ADMIN|FMS_USERNAME|FMS_PASSWORD_ENC|RESTART_REQUESTED_AT)=' "$CONFIG_FILE" || true)
    fi

    cat > "$CONFIG_FILE" <<EOF_CONF
ENCRYPT_KEY="${ENCRYPT_KEY}"
FMS_ADMIN="${FMS_ADMIN}"
FMS_USERNAME="${FMS_USERNAME}"
FMS_PASSWORD_ENC="${FMS_PASSWORD_ENC}"
EOF_CONF
    if [[ -n "$RESTART_REQUESTED_AT" ]]; then
        echo "RESTART_REQUESTED_AT=\"${RESTART_REQUESTED_AT}\"" >> "$CONFIG_FILE"
    fi
    if [[ -n "$OTHER_CONFIG" ]]; then
        printf '%s\n' "$OTHER_CONFIG" >> "$CONFIG_FILE"
    fi

    echo
    echo "  Configuration saved to $CONFIG_FILE"

    echo
}

show_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        show_missing_config
        return 1
    fi

    source "$CONFIG_FILE"
    ENCRYPT_KEY="${ENCRYPT_KEY:-$(random_key)}"
    if [[ -n "$FMS_PASSWORD_ENC" && -z "$FMS_PASSWORD" ]]; then
        FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
    fi

    # Remove any carriage returns that might be present
    FMS_ADMIN=${FMS_ADMIN//$'\r'/}
    FMS_USERNAME=${FMS_USERNAME//$'\r'/}
    FMS_PASSWORD=${FMS_PASSWORD//$'\r'/}
    RESTART_REQUESTED_AT=${RESTART_REQUESTED_AT//$'\r'/}

    echo
    echo "     FMS_ADMIN: $FMS_ADMIN"
    echo "  FMS_USERNAME: $FMS_USERNAME"
    echo "  FMS_PASSWORD: $FMS_PASSWORD"
    echo "   ENCRYPT_KEY: $ENCRYPT_KEY"
    if [[ -n "$RESTART_REQUESTED_AT" ]]; then
        echo "RESTART_REQUESTED_AT: $RESTART_REQUESTED_AT"
    fi
    echo
}

# Helper to run an fmsadmin command in non-verbose mode while still
# showing any error output if the command fails. The command is executed
# with all of its arguments. Standard output is suppressed unless VERBOSE
# is enabled. Standard error is always shown.
run_fmsadmin() {
    if [[ $VERBOSE -eq 1 ]]; then
        "$@"
        return $?
    else
        local output
        output=$("$@" 2>&1 >/dev/null)
        local status=$?
        if [[ $status -ne 0 ]]; then
            echo "$output"
        fi
        return "$status"
    fi
}

# Check for a --verbose flag before processing other options
if [[ "$1" == "--verbose" ]]; then
    VERBOSE=1
    shift
fi

if [[ "$1" == "--restart-soon" ]]; then
    if [[ ! -f "$CONFIG_FILE" ]]; then
        show_missing_config
        exit 1
    fi
    RESTART_FLAG="${SCRIPT_DIR}/fms-restart-needed"
    touch "$RESTART_FLAG"
    set_config_var "RESTART_REQUESTED_AT" "$(date +%s)"
    echo
    echo "  Restart flag created at $RESTART_FLAG"
    echo
    exit 0
elif [[ "$1" == "--configure" ]]; then
    configure
    exit $?
elif [[ "$1" == "--show-config" ]]; then
    show_config 2> >(indent_output >&2) | indent_output
    exit $?
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
    exit 0
fi

function clients_are_connected () {

    local _orig_dry_run=${DRY_RUN:-0}
    DRY_RUN=0

    echo -n "fmsadmin list clients..."
    CLIENTS_LIST_OUTPUT="$($FMS_ADMIN --username "$FMS_USERNAME" --password "$FMS_PASSWORD" list clients 2>&1)"
    status=$?
    DRY_RUN="$_orig_dry_run"
    if [[ $status -ne 0 ]] ; then
        echo "failed"
        return 1
    fi

    count=$(printf '%s\n' "$CLIENTS_LIST_OUTPUT" | wc -l)
    if [[ $count -eq 0 ]]; then
        echo "0 connected"
        return 1
    fi

    if [[ $VERBOSE -eq 1 && -n "$CLIENTS_LIST_OUTPUT" ]]; then
        echo
        echo
        printf '%s\n' "$CLIENTS_LIST_OUTPUT"
        echo
    fi

    count=$((count - 1))
    if [[ $count -eq 0 ]]; then
        if [[ $VERBOSE -eq 1 ]]; then
            echo -n "...0 connected"
        else
            echo -n "0 connected"
        fi
        return 1
    fi
    # Prefix the count with an ellipsis in verbose mode so the final
    # output mirrors the non-verbose case, e.g.
    #   fmsadmin list clients...
    #   ...1 connected
    if [[ $VERBOSE -eq 1 ]]; then
        echo -n "...${count} connected"
    else
        echo -n "${count} connected"
    fi
    return 0

}


function fmsadmin_close () {

                if clients_are_connected ; then
                                echo "...aborting restart"
                                return 1
                fi

                echo
                if [[ $VERBOSE -eq 1 ]]; then
                                echo "fmsadmin close..."
                                echo
                                CLOSE_LOG_OUTPUT="$($FMS_ADMIN --username "$FMS_USERNAME" --password "$FMS_PASSWORD" close --yes 2>&1)"
                                status=$?
                                printf '%s\n' "$CLOSE_LOG_OUTPUT"
                else
               echo -n "fmsadmin close..."
                                CLOSE_LOG_OUTPUT="$($FMS_ADMIN --username "$FMS_USERNAME" --password "$FMS_PASSWORD" close --yes 2>&1)"
                                status=$?
                fi
                if [[ $status -ne 0 ]]; then
                                echo "failed"
                                return "$status"
                fi

                FILES_CLOSED_COUNT=$(printf '%s\n' "$CLOSE_LOG_OUTPUT" | grep -c '^File Closed:')
                if [[ $VERBOSE -eq 1 ]]; then
                                echo
                                echo "...${FILES_CLOSED_COUNT} files closed"
                else
                                echo "${FILES_CLOSED_COUNT} files closed"
                fi
                return 0

}

function fms_restart () {

                # fmsadmin_close performs its own client check, so avoid calling
                # clients_are_connected twice.
                fmsadmin_close || return 1

                echo
                echo "fmsadmin stop adminserver..."
                run_fmsadmin "$FMS_ADMIN" --username "$FMS_USERNAME" --password "$FMS_PASSWORD" stop adminserver --yes
                status=$?
                if [[ $status -ne 0 ]]; then
                                echo "failed"
                                return "$status"
                fi
                echo

                echo "fmsadmin stop server..."
                run_fmsadmin "$FMS_ADMIN" --username "$FMS_USERNAME" --password "$FMS_PASSWORD" stop server --yes
                status=$?
                if [[ $status -ne 0 ]]; then
                                echo "failed"
                                return "$status"
                fi
                echo

                echo "fmsadmin start server..."
                run_fmsadmin "$FMS_ADMIN" --username "$FMS_USERNAME" --password "$FMS_PASSWORD" start server
                status=$?
                if [[ $status -ne 0 ]]; then
                                echo "failed"
                                return "$status"
                fi
                echo

                echo "fmsadmin start adminserver..."
                run_fmsadmin "$FMS_ADMIN" --username "$FMS_USERNAME" --password "$FMS_PASSWORD" start adminserver
                status=$?
                if [[ $status -ne 0 ]]; then
                                echo "failed"
                                return "$status"
                fi

                rm "$RESTART_FLAG"

                while ! clients_are_connected >/dev/null ; do
                                sleep 1
                done
                return 0

}

run_default() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        show_missing_config
        return 1
    fi
    RESTART_FLAG="${SCRIPT_DIR}/fms-restart-needed"

    # Reset any previous command output
    CLIENTS_LIST_OUTPUT=""
    CLOSE_LOG_OUTPUT=""

    source "$CONFIG_FILE"
    ENCRYPT_KEY="${ENCRYPT_KEY:-$(random_key)}"
    if [[ -n "$FMS_PASSWORD_ENC" && -z "$FMS_PASSWORD" ]]; then
        FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
    fi

    # Remove any carriage returns from config values in case the file
    # was edited on Windows. Trailing CR characters cause fmsadmin to
    # ignore the provided password and prompt interactively.
    FMS_ADMIN=${FMS_ADMIN//$'\r'/}
    FMS_USERNAME=${FMS_USERNAME//$'\r'/}
    FMS_PASSWORD=${FMS_PASSWORD//$'\r'/}

    echo -n "$(date)"

    restart_needed=0
    if [[ -n "$RESTART_REQUESTED_AT" ]]; then
        restart_needed=1
    fi
    if [[ -f "$RESTART_FLAG" ]]; then
        restart_needed=1
    fi

    if [[ $restart_needed -eq 1 ]]; then

        echo " - FMS restart is needed"

        # Add a blank line before printing detailed command output
        echo

        if fms_restart ; then
            echo
            echo -n "$(date)"
            echo " - FMS restarted"
        else
            echo
            echo -n "$(date)"
            echo " - FMS restart aborted"
        fi

    else

        echo " - FMS restart is not needed"

    fi

    if [[ -n "$RESTART_REQUESTED_AT" ]]; then
        set_config_var "RESTART_REQUESTED_AT" ""
    fi

}

if [[ $# -eq 0 ]]; then
    echo
    run_default > >(sed 's/^/  /') 2> >(sed 's/^/  /' >&2)
    status=$?
    echo
    exit $status
else
    run_default "$@"
fi
