#!/bin/bash

# Configuration directory and files
CONFIG_DIR="${HOME}/.fms-tools"
CONFIG_FILE="${CONFIG_DIR}/fms-tools.config"

# Password encryption key shared across all fms-tools (not secret but avoids
# plain text storage)
ENCRYPT_KEY="fms-tools"

# Track whether extra command output should be displayed
VERBOSE=0

# Helper functions for encrypting and decrypting passwords
encrypt_password() {
    local plaintext="$1"
    printf '%s' "$plaintext" | openssl enc -aes-256-cbc -a -salt -pbkdf2 \
        -pass pass:"$ENCRYPT_KEY" 2>/dev/null
}

decrypt_password() {
    local ciphertext="$1"
    printf '%s\n' "$ciphertext" | openssl enc -aes-256-cbc -a -d -salt -pbkdf2 \
        -pass pass:"$ENCRYPT_KEY" 2>/dev/null
}

show_help() {
    echo
    cat <<EOH
  fms-certbot-deployer.sh - deploy renewed Let's Encrypt certificates to FileMaker Server.

  Usage: $0 [--configure|--show-config|--verbose|--help]

  --configure   Launch an interactive wizard to set up the fmsadmin configuration.
  --show-config Display the current configuration values.
  --verbose     Display raw output from fmsadmin commands.
  --help        Display this help message and exit.

  Running without options deploys certificates using settings stored in the configuration.
EOH
    echo
}

show_missing_config() {
    cat >&2 <<EOM

  It looks like this is your first time running fms-certbot-deployer.
  One or more configuration files were not found.

  Expected directory: $CONFIG_DIR
  Expected file:
    $CONFIG_FILE

  Run "$0 --configure" to create the configuration.
  Example:
    $0 --configure
EOM

    echo >&2
}

configure() {
    echo
    mkdir -p "$CONFIG_DIR"

    echo "  This wizard will create or update the FileMaker Server configuration."
    echo
    echo "  Settings will be saved to $CONFIG_FILE"
    echo

    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        if [[ -n "$FMS_PASSWORD_ENC" ]]; then
            FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
        fi
    fi
    if [ -f "$CONFIG_FILE" ]; then
        echo "  Existing configuration detected; current values are shown in brackets."
        echo
    fi

    if [[ -z "$FMS_ADMIN" ]]; then
        candidate=$(command -v fmsadmin 2>/dev/null)
        if [[ -n "$candidate" && -x "$candidate" ]]; then
            FMS_ADMIN="$candidate"
        else
            candidate=$(command -v fmsadmin.exe 2>/dev/null)
            if [[ -n "$candidate" && -x "$candidate" ]]; then
                FMS_ADMIN="$candidate"
            fi
        fi
    fi

    echo "  Specify the full path to the 'fmsadmin' command."
    read -rp "  Path to fmsadmin [${FMS_ADMIN:-}] : " input
    FMS_ADMIN=${input:-$FMS_ADMIN}
    echo

    echo "  Enter the username used for fmsadmin / FileMaker Server Admin Console."
    read -rp "  Username [${FMS_USERNAME:-}] : " input
    FMS_USERNAME=${input:-$FMS_USERNAME}
    echo

    echo "  Enter the password for the username above."
    echo "  The password will be stored encrypted in $CONFIG_FILE."
    if [[ -n "$FMS_PASSWORD" ]]; then
        read -srp "  Password [********] : " input
        echo
        FMS_PASSWORD=${input:-$FMS_PASSWORD}
    else
        read -srp "  Password : " FMS_PASSWORD
        echo
    fi

    echo

    if [[ -z "$FMS_CSTORE" ]]; then
        if [[ -d "/opt/FileMaker/FileMaker Server/CStore/" ]]; then
            FMS_CSTORE="/opt/FileMaker/FileMaker Server/CStore/"
        elif [[ -d "/mnt/c/Program Files/FileMaker/FileMaker Server/CStore/" ]]; then
            FMS_CSTORE="/mnt/c/Program Files/FileMaker/FileMaker Server/CStore/"
        fi
    fi
    echo "  Specify the full path to the FileMaker Server CStore directory."
    read -rp "  CStore folder [${FMS_CSTORE:-}] : " input
    FMS_CSTORE=${input:-$FMS_CSTORE}
    echo

    echo "  Enter the primary domain used with certbot."
    read -rp "  Certbot domain [${CERTBOT_DOMAIN:-}] : " input
    CERTBOT_DOMAIN=${input:-$CERTBOT_DOMAIN}
    echo

    FMS_PASSWORD_ENC=$(encrypt_password "$FMS_PASSWORD")
    cat > "$CONFIG_FILE" <<EOF_CONF
FMS_ADMIN="${FMS_ADMIN}"
FMS_USERNAME="${FMS_USERNAME}"
FMS_PASSWORD_ENC="${FMS_PASSWORD_ENC}"
FMS_CSTORE="${FMS_CSTORE}"
CERTBOT_DOMAIN="${CERTBOT_DOMAIN}"
EOF_CONF

    echo "  Configuration saved to $CONFIG_FILE"

    echo
}

show_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        show_missing_config
        return 1
    fi

    source "$CONFIG_FILE"
    if [[ -n "$FMS_PASSWORD_ENC" && -z "$FMS_PASSWORD" ]]; then
        FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
    fi

    FMS_ADMIN=${FMS_ADMIN//$'\r'/}
    FMS_USERNAME=${FMS_USERNAME//$'\r'/}
    FMS_PASSWORD=${FMS_PASSWORD//$'\r'/}
    FMS_CSTORE=${FMS_CSTORE//$'\r'/}
    CERTBOT_DOMAIN=${CERTBOT_DOMAIN//$'\r'/}

    echo
    printf '%16s: %s\n' "FMS_ADMIN" "$FMS_ADMIN"
    printf '%16s: %s\n' "FMS_USERNAME" "$FMS_USERNAME"
    printf '%16s: %s\n' "FMS_PASSWORD" "$FMS_PASSWORD"
    printf '%16s: %s\n' "FMS_CSTORE" "$FMS_CSTORE"
    printf '%16s: %s\n' "CERTBOT_DOMAIN" "$CERTBOT_DOMAIN"
    echo
}

run_fmsadmin() {
    if [[ $VERBOSE -eq 1 ]]; then
        "$@"
        return $?
    else
        local output
        output=$("$@" 2>&1 >/dev/null)
        local status=$?
        if [[ $status -ne 0 ]]; then
            echo "$output"
        fi
        return "$status"
    fi
}

run_default() {
    if [[ ! -d "$CONFIG_DIR" || ! -f "$CONFIG_FILE" ]]; then
        show_missing_config
        return 1
    fi

    source "$CONFIG_FILE"
    if [[ -n "$FMS_PASSWORD_ENC" && -z "$FMS_PASSWORD" ]]; then
        FMS_PASSWORD=$(decrypt_password "$FMS_PASSWORD_ENC")
    fi

    FMS_ADMIN=${FMS_ADMIN//$'\r'/}
    FMS_USERNAME=${FMS_USERNAME//$'\r'/}
    FMS_PASSWORD=${FMS_PASSWORD//$'\r'/}
    FMS_CSTORE=${FMS_CSTORE//$'\r'/}
    CERTBOT_DOMAIN=${CERTBOT_DOMAIN//$'\r'/}

    local lineage
    if [[ -n "$RENEWED_LINEAGE" ]]; then
        lineage="$RENEWED_LINEAGE"
    else
        lineage="/etc/letsencrypt/live/$CERTBOT_DOMAIN"
    fi

    if [[ ! -f "$lineage/privkey.pem" || ! -f "$lineage/fullchain.pem" ]]; then
        echo "Certificate files not found in $lineage" >&2
        return 1
    fi

    if [[ -n "$RENEWED_DOMAINS" && "$RENEWED_DOMAINS" != *"$CERTBOT_DOMAIN"* ]]; then
        echo "Domains '$RENEWED_DOMAINS' do not include '$CERTBOT_DOMAIN'; skipping." >&2
        return 0
    fi

    echo "Copying new certificate files from $lineage to $FMS_CSTORE"
    cp "$lineage/privkey.pem" "$FMS_CSTORE/serverKey.pem"
    cp "$lineage/fullchain.pem" "$FMS_CSTORE/serverCustom.pem"

    echo "Importing certificate with fmsadmin..."
    run_fmsadmin "$FMS_ADMIN" --username "$FMS_USERNAME" --password "$FMS_PASSWORD" \
        certificate import "$FMS_CSTORE/serverKey.pem" "$FMS_CSTORE/serverCustom.pem" --yes
    local status=$?
    if [[ $status -ne 0 ]]; then
        echo "Certificate import failed" >&2
        return $status
    fi

    if command -v fms-restarter.sh >/dev/null 2>&1; then
        fms-restarter.sh --restart-soon
    fi
    return 0
}

if [[ "$1" == "--verbose" ]]; then
    VERBOSE=1
    shift
fi

if [[ "$1" == "--configure" ]]; then
    configure
    exit $?
elif [[ "$1" == "--show-config" ]]; then
    show_config > >(sed 's/^/  /') 2> >(sed 's/^/  /' >&2)
    exit $?
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
    exit 0
fi

if [[ $# -gt 0 ]]; then
    echo "Unknown option: $1" >&2
    show_help >&2
    exit 1
fi

run_default
exit $?

